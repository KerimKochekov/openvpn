#!/usr/sbin/nft -f

flush ruleset

define ICMPv4_TYPES = {
  destination-unreachable,
  echo-reply,
  echo-request,
  parameter-problem,
  router-advertisement,
  router-solicitation,
  time-exceeded
}

define ICMPv6_TYPES = {
  destination-unreachable,
  echo-reply,
  echo-request,
  mld-listener-query,
  mld-listener-reduction,
  mld-listener-report,
  mld2-listener-report,
  packet-too-big,
  parameter-problem,
  time-exceeded
}

define ICMPv6_TYPES_LIMIT = {
  ind-neighbor-advert,
  ind-neighbor-solicit,
  nd-neighbor-advert,
  nd-neighbor-solicit,
  nd-router-advert,
  nd-router-solicit
}

table inet filter {
  set tcp_scan_ports {
    type inet_service; flags interval;
    elements = { 22,23,445,1433-1434,3389,8080,8200-65535 }
  }

  set udp_scan_ports {
    type inet_service; flags interval;
    elements = { 135-139,5060-5068,53413 }
  }

  chain basic-checks {
    ct state invalid counter drop
    ct state { established, related } counter accept
  }

  chain input {
    type filter hook input priority 0; policy drop;

    jump basic-checks

    iifname lo accept
    iifname != lo ip daddr 127.0.0.1/8 counter drop
    iifname != lo ip6 daddr ::1/128 counter drop

    ip protocol icmp icmp type {echo-reply, echo-request} limit rate over 7/second burst 4 packets drop
    ip6 nexthdr icmpv6 icmpv6 type {echo-reply, echo-request} limit rate over 7/second burst 4 packets drop

    ip protocol icmp icmp type $ICMPv4_TYPES counter accept
    ip6 nexthdr icmpv6 icmpv6 type $ICMPv6_TYPES counter accept
    ip6 nexthdr icmpv6 ip6 hoplimit 1 icmpv6 type $ICMPv6_TYPES_LIMIT counter accept
    ip6 nexthdr icmpv6 ip6 hoplimit 255 icmpv6 type $ICMPv6_TYPES_LIMIT counter accept
    ip protocol igmp counter accept

    tcp dport @tcp_scan_ports counter drop
    udp dport @udp_scan_ports counter drop

    tcp dport 2219 counter accept
    udp dport 443 counter accept

    ip protocol tcp reject with tcp reset
    ip protocol udp reject
    reject with icmpx type port-unreachable
    counter comment "count dropped packets"
  }

  chain forward {
    type filter hook forward priority 0; policy drop;

    jump basic-checks

    # iifname "tun*" oifname eth0 counter accept
    iifname "tun*" counter accept
    iifname "docker*" counter accept
    iifname "br*" counter accept

    counter comment "count dropped packets"
  }

}

table ip nat {
  chain postrouting {
    type nat hook postrouting priority 100; policy accept;

    # iifname "tun*" oifname eth0 ip saddr 10.13.23.0/24 masquerade random,persistent
    oifname eth0 masquerade random,persistent

    counter comment "count accepted packets"
  }
}
